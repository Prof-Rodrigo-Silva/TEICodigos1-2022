library(shiny)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao para atualizar a mensagem", icon("refresh"))
),
mainPanel(
textOutput("idSaida")
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao para atualizar a mensagem", icon("refresh"))
),
mainPanel(
textOutput("idSaida")
)
)
)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao para atualizar a mensagem", icon("refresh"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon("refresh"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("area-chart"))
),
mainPanel(
textOutput("idSaida")
)
)
)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("calendar", "fa-3x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("reflesh", "fa-1x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("reflesh", "fa-1x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("reflesh", "fa-2x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("refresh", "fa-1x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("refresh", "fa-2x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Botao de Acao"),
sidebarLayout(
sidebarPanel(
actionButton("idBotao", "Clique no botao", icon = icon("calendar", "fa-1x"))
),
mainPanel(
textOutput("idSaida")
)
)
)
server <- function(input, output){
observeEvent(input$idBotao, {
#todo o codigo que estiver dentro da observeEvent sera executado quando o botao for pressionado
output$idSaida <- renderText("Mensagem que sera exibida quando o botao for pressionado")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Usando Slider"),
sidebarLayout(
sidebarPanel(
sliderInput("idSlider", "Informe a quantidade de dados da amostra", min = 0, max = 1000, step = 100, value = 500)
),
mainPanel(textOutput("idSaidaSlider"))
)
)
server <- function(input, output){
output$idSaidaSlider <- renderText({ input$idSlider})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput("checkboxId", "Selecione os produtos", list("TV" = 1, "CELULAR" = 2, "NOTEBOOK" = 3, "SOM" = 4))
),
mainPanel(
actionButton("salvaProdutos", "Clique")
)
)
)
server <- function(input, output){
observeEvent(input$salvaProdutos, {
opcoesSelecionados <- as.data.frame(input$checkboxId)
print(opcoesSelecionados)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
install.packages("shinythemes")
library(dplyr)
library(readxl)
library(shiny)
#install.packages("shinydashboard")
library(shinydashboard)
#install.packages("shinythemes")
library(shinythemes)
getwd()
setwd("/home/rodrigo/Área de Trabalho/RStudio/Shiny")
dados <- read_xlsx(path = "dados.xlsx")
dados <- read_xlsx(path = "dados.xlsx")
estados <- list("RS - Rio Grande do Sul" = 1, "SP - São Paulo" = 2,"SC - Santa Catarina" = 3)
choices_RS <- list("Bagé" = 105, "Porto Alegre" = 106, "Caçapava do Sul" = 107)
choices_SP <- list("São Paulo " = 205,"Guarulhos" = 206, "Campinas" = 207)
choices_SC <- list("Florianopolis" = 305, "São Miguel do Oeste" = 306 , "Criciuma" = 307)
ui <- dashboardPage(skin = "blue",
dashboardHeader(
title = "Select",
titleWidth = 186
),
dashboardSidebar(
tags$p(),
selectInput("selectEstado", label = "Estados", choices = estados),
uiOutput("ui"),
#Documentacao: https://shiny.rstudio.com/articles/selectCidade-ui.html
tags$div(class = "alinhamento",
actionButton("filtrar", "Filtrar")
)
),
dashboardBody(
tags$style(type="text/css", ".alinhamento {color: black;height:40px;display:flex;align-items: center;justify-content: center;}"),
tabsetPanel(
navbarMenu("Dados cidade",
tabPanel(
title = "Dados cidade",
value = "page1",
fluidRow(
column(12,
tags$h3(class = "alinhamento", "Dados"),
)
),
fluidRow(
column(4,
textOutput("cidade")
),
column(4,
textOutput("estado")
),
column(4,
textOutput("populacao")
)
)
)
)
)
)
)
server <- function(input, output, session) {
output$ui <- renderUI({
if (is.null(input$selectEstado))
return()
switch(input$selectEstado,
"1" = selectInput("selectCidade", label = "Cidade",
choices = choices_MG),
"2" = selectInput("selectCidade", label = "Cidade",
choices = choices_SP),
"3" = selectInput("selectCidade", label = "Cidade",
choices = choices_RJ)
)
})
observeEvent(input$filtrar, {
opcaoSelecionada <- input$selectCidade
dadosFiltrados <- dados[dados$codigoCidade == opcaoSelecionada, ]
dadosFiltrados <- as.data.frame(dadosFiltrados)
output$cidade <- renderText({
dadosFiltrados[1,2]
})
output$estado <- renderText({
dadosFiltrados[1,3]
})
output$populacao <- renderText({
dadosFiltrados[1,4]
})
})
}
shinyApp(ui, server)
View(dados)
server <- function(input, output, session) {
output$ui <- renderUI({
if (is.null(input$selectEstado))
return()
switch(input$selectEstado,
"1" = selectInput("selectCidade", label = "Cidade",
choices = choices_RS),
"2" = selectInput("selectCidade", label = "Cidade",
choices = choices_SP),
"3" = selectInput("selectCidade", label = "Cidade",
choices = choices_SC)
)
})
observeEvent(input$filtrar, {
opcaoSelecionada <- input$selectCidade
dadosFiltrados <- dados[dados$codigoCidade == opcaoSelecionada, ]
dadosFiltrados <- as.data.frame(dadosFiltrados)
output$cidade <- renderText({
dadosFiltrados[1,2]
})
output$estado <- renderText({
dadosFiltrados[1,3]
})
output$populacao <- renderText({
dadosFiltrados[1,4]
})
})
}
shinyApp(ui, server)
runApp('11-SelectDinamico.R')
runApp('11-SelectDinamico.R')
